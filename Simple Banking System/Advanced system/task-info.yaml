type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/persistence/AccountRepository.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;
    import banking.database.Store;

    import java.util.List;

    public class AccountRepository implements IAccountStore{
        private Store store = Store.getInstance();

        @Override
        public Account addAccount(Account a) {
            return store.addAccount(a);
        }

        @Override
        public Account findAccount(String c) {
            return store.findAccount(c);
        }

        @Override
        public boolean cardExist(String c) {
            return store.cardExist(c);
        }

        @Override
        public List<Account> allAccounts() {
            return store.all();
        }
    }
  learner_created: true
- name: src/banking/database/Store.java
  visible: true
  text: |
    package banking.database;

    import banking.business.Account;
    import banking.business.Card;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Store {
        private static Store instance;

        private Map<String, Account> accountMap;

        private Store() {
            accountMap = new HashMap<>();
        }

        public static Store getInstance() {
            if (instance == null) {
                instance = new Store();
            }
            return instance;
        }


        public Account addAccount(Account account) {
            return accountMap.put(account.getCard().getCardNumber(), account);
        }

        public Account findAccount(String cardNumber) {
            return accountMap.get(cardNumber);
        }

        public boolean cardExist(String cardNumber) {
            return accountMap.containsKey(cardNumber);
        }

        public List<Account> all() {
            List<Account> cards = new ArrayList<>();
            for (Map.Entry<String, Account> entry : accountMap.entrySet()) {
                cards.add(entry.getValue());
            }
            return cards;
        }

        public Map<String, Account> getAccountMap() {
            return accountMap;
        }

        public void setAccountMap(Map<String, Account> accountMap) {
            this.accountMap = accountMap;
        }
    }
  learner_created: true
- name: src/banking/helpers/CustomerAccountNumberGenerator.java
  visible: true
  text: |
    package banking.helpers;

    import java.util.Random;

    public class CustomerAccountNumberGenerator {

        private int leftLimit = 48;
        private int rightLimit = 57;
        private int targetStringLength = 9;
        private Random random = new Random(1000000000);

        public String generate9Digits() {
            return random.ints(leftLimit, rightLimit + 1)
                    .limit(targetStringLength)
                    .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                    .toString();
        }
    }
  learner_created: true
- name: src/banking/presentation/Menu.java
  visible: true
  text: |
    package banking.presentation;

    public class Menu {

        public static void startMenu() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
        }

        public static void loginMenu() {
            System.out.println("1. Balance");
            System.out.println("2. Add income");
            System.out.println("3. Do transfer");
            System.out.println("4. Close account");
            System.out.println("5. Log out");
            System.out.println("0. Exit");
        }
    }
  learner_created: true
- name: src/banking/persistence/IAccountStore.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;

    import java.util.List;

    public interface IAccountStore {

        public Account addAccount(Account a);
        public Account findAccount(String c);
        public boolean cardExist(String c);
        public List<Account> allAccounts();
    }
  learner_created: true
- name: src/banking/persistence/DAOFactory.java
  visible: true
  text: |
    package banking.persistence;

    public abstract class DAOFactory {

        // List of DAO types supported by the factory
        public static final int SQLITE3 = 1;

        // There will be a method for each DAO that can be
        // created. The concrete factories will have to
        // implement these methods.
        public abstract AccountDAO getAccountDAO();

        public static DAOFactory getDAOFactory(int whichFactory) {
            switch (whichFactory) {
                case SQLITE3:
                    return new SQLITE3DAOFactory();
                default:
                    return null;
            }
        }
    }
  learner_created: true
- name: src/banking/persistence/AccountDAO.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;

    import java.util.List;

    public interface AccountDAO {
        public Account addAccount(Account a);
        public Account findAccount(String c);
        public boolean cardExist(String c);
        public List<Account> allAccounts();
        public void createTable();
        public void dropTable();
    }
  learner_created: true
- name: src/banking/helpers/LuhnAlgorithmHelper.java
  visible: true
  text: |
    package banking.helpers;

    public class LuhnAlgorithmHelper {

        public  boolean checkLuhn(String cardNo) {
            int nDigits = cardNo.length();

            int sum = 0;
            for (int i = 0; i < nDigits; i++)
            {
                char tmp = cardNo.charAt(i);
                // #1: fixed the '0' problem
                int num = tmp - '0';
                int product;
                if (i % 2 != 0){
                    product = num * 1;
                }
                else{
                    product = num * 2;
                }
                if (product > 9)
                    product -= 9;
                sum+= product;
            }

            return (sum % 10 == 0);
        }

        public  int luhnSum(String cardNo) {
            int nDigits = cardNo.length();

            int sum = 0;
            for (int i = 0; i < nDigits; i++)
            {
                char tmp = cardNo.charAt(i);
                // #1: fixed the '0' problem
                int num = tmp - '0';
                int product;
                if (i % 2 != 0){
                    product = num * 1;
                }
                else{
                    product = num * 2;
                }
                if (product > 9)
                    product -= 9;
                sum+= product;
            }
            return sum;
        }
    }
  learner_created: true
- name: src/banking/presentation/DisplayAndControl.java
  visible: true
  text: |
    package banking.presentation;

    import banking.business.Account;
    import banking.business.AccountService;

    import java.util.List;
    import java.util.Scanner;

    public class DisplayAndControl {
        private final Scanner scanner;
        private final AccountService accountService;


        public DisplayAndControl() {
            scanner =  new Scanner(System.in);
            accountService = new AccountService();
        }

        public DisplayAndControl(AccountService accountService) {
            scanner =  new Scanner(System.in);
            this.accountService = accountService;
        }

        public void run() {
            choice();
        }

        private void choice(){
            String input = "";
            do {
                Menu.startMenu();
                input = scanner.nextLine();
                selection(input);
            } while (!input.equals("0"));
        }

        private void choice2(Account account){
            String input = "";
            do {
                Menu.loginMenu();
                input = scanner.nextLine();
                selection2(input, account);
            } while (!input.equals("0"));
        }

        private void selection(String inp) {
            switch (inp) {
                case "1":
                    Account account = accountService.createAccount();
                    if (account!=null) {
                        //accountService.save(account);
                        accountService.saveToDB(account);
                        System.out.println("Your card has been created");
                        System.out.printf("Your card number:\n%s\nYour card PIN:\n%s\n\n", account.getCard().getCardNumber(), account.getCard().getCardPin());

                    }
                    break;
                case "2":
                    validateCard();
                    break;
                case "3":
                    List<Account> accounts = accountService.all();
                    if (accounts.size() == 0) {
                        System.out.println("No accounts created\n");
                        return;
                    }
                    System.out.println("Created Accounts\n");
                    for(Account a: accounts) {
                        System.out.println(a);
                    }
                    break;
                case "0":
                    System.out.println("Bye!");
                    System.exit(0);
                default:
                    break;
            }
        }

        private void selection2(String inp, Account account) {
            switch (inp) {
                case "1":
                    System.out.printf("Balance: %s\n", account.getBalance());
                    break;
                case "2":
                    System.out.println("You have successfully logged out!\n");
                    choice();
                    break;
                case "0":
                    System.exit(0);
                default:
                    break;
            }
        }

        private void validateCard() {
            System.out.println("Enter your card number:");
            String cn = scanner.nextLine();
            System.out.println("Enter your PIN:");
            String p = scanner.nextLine();
            //Account account = accountService.find(cn);
            Account account = accountService.findInDB(cn);
            System.out.println(account);
            if (account == null) {
                System.out.println("Wrong card number or PIN!\n");
                return;
            }

            if (!account.getCard().getCardPin().equalsIgnoreCase(p)){
                System.out.println("Wrong card number or PIN!\n");
                return;
            }

            System.out.println("You have successfully logged in!\n");
            choice2(account);
        }
    }
  learner_created: true
- name: src/banking/business/CardService.java
  visible: true
  text: |
    package banking.business;

    public class CardService {
    }
  learner_created: true
- name: src/banking/persistence/SQLITE3DAOFactory.java
  visible: true
  text: |
    package banking.persistence;

    import org.sqlite.SQLiteDataSource;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class SQLITE3DAOFactory extends DAOFactory{
            public static final String DRIVER = "org.h2.Driver";
            //public static final String DBURL = "jdbc:sqlite:C:/db/card.s3db";
            public static final String DBURL = "jdbc:sqlite:./card.s3db";

            // method to create H2 connections
            public static Connection createConnection() throws SQLException{
                // Use DRIVER and DBURL to create a connection
                // Recommend connection pool implementation/usage
                SQLiteDataSource dataSource = new SQLiteDataSource();
                dataSource.setUrl(DBURL);
                return dataSource.getConnection();
            }

            @Override
            public AccountDAO getAccountDAO() {
                // H2CompanyDAO implements CompanyDAO
                return new SQLITE3AccountDAO();
            }

        }
  learner_created: true
- name: src/banking/business/Card.java
  visible: true
  text: |
    package banking.business;

    public class Card {
        private String cardNumber;
        private String cardPin;

        public Card() {
        }

        public Card(String cardNumber, String cardPin) {
            this.cardNumber = cardNumber;
            this.cardPin = cardPin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public void setCardNumber(String cardNumber) {
            this.cardNumber = cardNumber;
        }

        public String getCardPin() {
            return cardPin;
        }

        public void setCardPin(String cardPin) {
            this.cardPin = cardPin;
        }

        @Override
        public String toString() {
            return "Card{" +
                    "cardNumber='" + cardNumber + '\'' +
                    ", cardPin='" + cardPin + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/banking/business/AccountService.java
  visible: true
  text: |
    package banking.business;

    import banking.database.Store;
    import banking.helpers.CardPinGenerator;
    import banking.helpers.CustomerAccountNumberGenerator;
    import banking.helpers.LuhnAlgorithmHelper;
    import banking.persistence.AccountDAO;
    import banking.persistence.AccountRepository;
    import banking.persistence.DAOFactory;

    import java.util.List;

    public class AccountService {
        private AccountRepository accountRepository;
        private CustomerAccountNumberGenerator customerAccountNumberGenerator;
        private CardPinGenerator cardPinGenerator;
        private LuhnAlgorithmHelper luhnAlgorithmHelper;
        private AccountDAO accountDAO;
        private DAOFactory sqlite3Factory;

        public AccountService() {
            accountRepository = new AccountRepository();
            customerAccountNumberGenerator = new CustomerAccountNumberGenerator();
            cardPinGenerator = new CardPinGenerator();
            luhnAlgorithmHelper = new LuhnAlgorithmHelper();
            sqlite3Factory = DAOFactory.getDAOFactory(DAOFactory.SQLITE3);
            accountDAO = sqlite3Factory.getAccountDAO();
        }

        public String createPin() {
            return cardPinGenerator.generate4Digits();
        }

        public String createCustomerAccountNumber() {
            String customerAccountNumber = customerAccountNumberGenerator.generate9Digits();
            return  customerAccountNumber;
        }

        public String createCardNumber(Account account, String customerAccountNumber) {
            String cardNumber = account.getBIN() + customerAccountNumber;
            cardNumber += checkDigit(cardNumber);

            return cardNumber;
        }

        public int checkDigit(String cardNo) {

            int sum = luhnAlgorithmHelper.luhnSum(cardNo);
            if(sum % 10 == 0){
                return 0;
            }
            int rem = sum % 10;

            return 10 - rem;
        }

        public Account createAccount() {
            Account account = new Account();
            Card card = new Card();
            String customerAccountNumber = createCustomerAccountNumber();
            String cardPin = createPin();
            String cardNumber = createCardNumber(account, customerAccountNumber);

            card.setCardNumber(cardNumber);
            card.setCardPin(cardPin);

            account.setCustomer_account_number(customerAccountNumber);
            account.setCard(card);

            return account;
        }

        public Account save(Account account) {
            return accountRepository.addAccount(account);
        }

        public Account saveToDB(Account account) {
            return accountDAO.addAccount(account);
        }

        public Account find(String c) {
            return accountRepository.findAccount(c);
        }

        public Account findInDB(String c) {
            return accountDAO.findAccount(c);
        }

        public boolean exist(String c) {
            return accountRepository.cardExist(c);
        }

        public List<Account> all() {
            return accountRepository.allAccounts();
        }

        public void createTable(){
            accountDAO.createTable();
        }

        public void dropTable() {
            accountDAO.dropTable();
        }
    }
  learner_created: true
- name: src/banking/helpers/CardPinGenerator.java
  visible: true
  text: |
    package banking.helpers;

    import java.util.Random;

    public class CardPinGenerator {

        private int leftLimit = 48;
        private int rightLimit = 57;
        private int targetStringLength = 4;
        private Random random = new Random(1000000);

        public String generate4Digits() {
            return random.ints(leftLimit, rightLimit + 1)
                    .limit(targetStringLength)
                    .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                    .toString();
        }
    }
  learner_created: true
- name: src/banking/persistence/SQLITE3AccountDAO.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;
    import banking.business.Card;

    import java.sql.*;
    import java.util.ArrayList;
    import java.util.List;

    public class SQLITE3AccountDAO implements AccountDAO{
        @Override
        public Account addAccount(Account a) {
            String insertPaymentSQL = "INSERT INTO \"CARD\" " +
                    "(NUMBER , PIN) VALUES (?, ?)";

            try (Connection con = SQLITE3DAOFactory.createConnection()) {

                try (PreparedStatement insertPayment = con.prepareStatement(insertPaymentSQL);) {

                    // Insert a payment
                    insertPayment.setString(1, a.getCard().getCardNumber());
                    insertPayment.setString(2, a.getCard().getCardPin());
                    insertPayment.executeUpdate();
                    System.out.println(a.getCard() + " saved");

                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return a;
        }

        @Override
        public Account findAccount(String c) {
            Account account = null;
            String updatePaymentSQL = "SELECT * FROM \"CARD\" " +
                    "WHERE NUMBER = ?";

            try (Connection con = SQLITE3DAOFactory.createConnection()) {

                try (PreparedStatement insertPayment = con.prepareStatement(updatePaymentSQL);) {
                    // Insert a payment
                    insertPayment.setString(1, c);

                    ResultSet rs = insertPayment.executeQuery();
                    while (rs.next()) {
                        account = new Account();
                        Card card = new Card();
                        card.setCardNumber(rs.getString(2));
                        card.setCardPin(rs.getString(3));
                        account.setBalance(rs.getLong(4));
                        account.setCard(card);
                        break;
                    }
                    System.out.println(" query successful");

                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return account;
        }

        @Override
        public boolean cardExist(String c) {
            return false;
        }

        @Override
        public List<Account> allAccounts() {
            return null;
        }

        @Override
        public void createTable() {
            try (Statement statement = SQLITE3DAOFactory.createConnection().createStatement();){
                statement.execute("create table if not exists card(" +
                        "ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        " NUMBER TEXT," +
                        " PIN TEXT," +
                        " BALANCE INTEGER DEFAULT 0" +
                        ")");
                System.out.println("CARD table created.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void dropTable() {
            try (Statement statement = SQLITE3DAOFactory.createConnection().createStatement();){
                statement.execute("drop table CARD if exists");
                System.out.println("CARD table dropped.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/banking/business/Account.java
  visible: true
  text: |
    package banking.business;


    import java.math.BigDecimal;

    public class Account {
        //Banking Identification Number
        private final String BIN = "400000";
        private final String CHECK_DIGIT = "9";

        private String customer_account_number;
        private long balance = 0;
        private Card card;

        public Account() {
        }

        public Account(Card card) {
            this.card = card;
        }

        public Card getCard() {
            return card;
        }

        public void setCard(Card card) {
            this.card = card;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public String getBIN() {
            return BIN;
        }

        public String getCHECK_DIGIT() {
            return CHECK_DIGIT;
        }

        public String getCustomer_account_number() {
            return customer_account_number;
        }

        public void setCustomer_account_number(String customer_account_number) {
            this.customer_account_number = customer_account_number;
        }

        @Override
        public String toString() {
            return "Account{" +
                    "BIN='" + BIN + '\'' +
                    ", CHECK_DIGIT='" + CHECK_DIGIT + '\'' +
                    ", customer_account_number='" + customer_account_number + '\'' +
                    ", balance=" + balance +
                    ", card=" + card +
                    '}';
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 19 Feb 2022 17:02:36 UTC
record: -1
