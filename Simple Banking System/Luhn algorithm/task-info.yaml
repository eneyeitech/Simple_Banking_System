type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/persistence/AccountRepository.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;
    import banking.database.Store;

    import java.util.List;

    public class AccountRepository implements IAccountStore{
        private Store store = Store.getInstance();

        @Override
        public Account addAccount(Account a) {
            return store.addAccount(a);
        }

        @Override
        public Account findAccount(String c) {
            return store.findAccount(c);
        }

        @Override
        public boolean cardExist(String c) {
            return store.cardExist(c);
        }

        @Override
        public List<Account> allAccounts() {
            return store.all();
        }
    }
  learner_created: true
- name: src/banking/database/Store.java
  visible: true
  text: |
    package banking.database;

    import banking.business.Account;
    import banking.business.Card;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Store {
        private static Store instance;

        private Map<String, Account> accountMap;

        private Store() {
            accountMap = new HashMap<>();
        }

        public static Store getInstance() {
            if (instance == null) {
                instance = new Store();
            }
            return instance;
        }


        public Account addAccount(Account account) {
            return accountMap.put(account.getCard().getCardNumber(), account);
        }

        public Account findAccount(String cardNumber) {
            return accountMap.get(cardNumber);
        }

        public boolean cardExist(String cardNumber) {
            return accountMap.containsKey(cardNumber);
        }

        public List<Account> all() {
            List<Account> cards = new ArrayList<>();
            for (Map.Entry<String, Account> entry : accountMap.entrySet()) {
                cards.add(entry.getValue());
            }
            return cards;
        }

        public Map<String, Account> getAccountMap() {
            return accountMap;
        }

        public void setAccountMap(Map<String, Account> accountMap) {
            this.accountMap = accountMap;
        }
    }
  learner_created: true
- name: src/banking/presentation/DisplayAndControl.java
  visible: true
  text: |
    package banking.presentation;

    import banking.business.Account;
    import banking.business.AccountService;

    import java.util.List;
    import java.util.Scanner;

    public class DisplayAndControl {
        private final Scanner scanner;
        private final AccountService accountService;

        public DisplayAndControl() {
            scanner =  new Scanner(System.in);
            accountService = new AccountService();
        }

        public void run() {
            choice();
        }

        private void choice(){
            String input = "";
            do {
                Menu.startMenu();
                input = scanner.nextLine();
                selection(input);
            } while (!input.equals("0"));
        }

        private void choice2(Account account){
            String input = "";
            do {
                Menu.loginMenu();
                input = scanner.nextLine();
                selection2(input, account);
            } while (!input.equals("0"));
        }

        private void selection(String inp) {
            switch (inp) {
                case "1":
                    Account account = accountService.createAccount();
                    if (account!=null) {
                        accountService.save(account);
                        System.out.println("Your card has been created");
                        System.out.printf("Your card number:\n%s\nYour card PIN:\n%s\n\n", account.getCard().getCardNumber(), account.getCard().getCardPin());

                    }
                    break;
                case "2":
                    validateCard();
                    break;
                case "3":
                    List<Account> accounts = accountService.all();
                    if (accounts.size() == 0) {
                        System.out.println("No accounts created\n");
                        return;
                    }
                    System.out.println("Created Accounts\n");
                    for(Account a: accounts) {
                        System.out.println(a);
                    }
                    break;
                case "0":
                    System.out.println("Bye!");
                default:
                    break;
            }
        }

        private void selection2(String inp, Account account) {
            switch (inp) {
                case "1":
                    System.out.printf("Balance: %s\n", account.getBalance());
                    break;
                case "2":
                    System.out.println("You have successfully logged out!\n");
                    choice();
                    break;
                case "0":
                default:
                    break;
            }
        }

        private void validateCard() {
            System.out.println("Enter your card number:");
            String cn = scanner.nextLine();
            System.out.println("Enter your PIN:");
            String p = scanner.nextLine();
            Account account = accountService.find(cn);
            if (account == null) {
                System.out.println("Wrong card number or PIN!\n");
                return;
            }

            if (!account.getCard().getCardPin().equalsIgnoreCase(p)){
                System.out.println("Wrong card number or PIN!\n");
                return;
            }

            System.out.println("You have successfully logged in!\n");
            choice2(account);
        }
    }
  learner_created: true
- name: src/banking/helpers/CustomerAccountNumberGenerator.java
  visible: true
  text: |
    package banking.helpers;

    import java.util.Random;

    public class CustomerAccountNumberGenerator {

        private int leftLimit = 48;
        private int rightLimit = 57;
        private int targetStringLength = 9;
        private Random random = new Random(1000000000);

        public String generate9Digits() {
            return random.ints(leftLimit, rightLimit + 1)
                    .limit(targetStringLength)
                    .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                    .toString();
        }
    }
  learner_created: true
- name: src/banking/business/CardService.java
  visible: true
  text: |
    package banking.business;

    public class CardService {
    }
  learner_created: true
- name: src/banking/presentation/Menu.java
  visible: true
  text: |
    package banking.presentation;

    public class Menu {

        public static void startMenu() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
        }

        public static void loginMenu() {
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit");
        }
    }
  learner_created: true
- name: src/banking/persistence/IAccountStore.java
  visible: true
  text: |
    package banking.persistence;

    import banking.business.Account;

    import java.util.List;

    public interface IAccountStore {

        public Account addAccount(Account a);
        public Account findAccount(String c);
        public boolean cardExist(String c);
        public List<Account> allAccounts();
    }
  learner_created: true
- name: src/banking/business/Card.java
  visible: true
  text: |
    package banking.business;

    public class Card {
        private String cardNumber;
        private String cardPin;

        public Card() {
        }

        public Card(String cardNumber, String cardPin) {
            this.cardNumber = cardNumber;
            this.cardPin = cardPin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public void setCardNumber(String cardNumber) {
            this.cardNumber = cardNumber;
        }

        public String getCardPin() {
            return cardPin;
        }

        public void setCardPin(String cardPin) {
            this.cardPin = cardPin;
        }

        @Override
        public String toString() {
            return "Card{" +
                    "cardNumber='" + cardNumber + '\'' +
                    ", cardPin='" + cardPin + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/banking/business/AccountService.java
  visible: true
  text: |
    package banking.business;

    import banking.database.Store;
    import banking.helpers.CardPinGenerator;
    import banking.helpers.CustomerAccountNumberGenerator;
    import banking.persistence.AccountRepository;

    import java.util.List;

    public class AccountService {
        private AccountRepository accountRepository;
        private CustomerAccountNumberGenerator customerAccountNumberGenerator;
        private CardPinGenerator cardPinGenerator;

        public AccountService() {
            accountRepository = new AccountRepository();
            customerAccountNumberGenerator = new CustomerAccountNumberGenerator();
            cardPinGenerator = new CardPinGenerator();
        }

        public String createPin() {
            return cardPinGenerator.generate4Digits();
        }

        public String createCustomerAccountNumber() {
            String customerAccountNumber = customerAccountNumberGenerator.generate9Digits();
            return  customerAccountNumber;
        }

        public String createCardNumber(Account account, String customerAccountNumber) {
            String cardNumber = account.getBIN() + customerAccountNumber + account.getCHECK_DIGIT();
            return cardNumber;
        }

        public Account createAccount() {
            Account account = new Account();
            Card card = new Card();
            String customerAccountNumber = createCustomerAccountNumber();
            String cardPin = createPin();
            String cardNumber = createCardNumber(account, customerAccountNumber);

            card.setCardNumber(cardNumber);
            card.setCardPin(cardPin);

            account.setCustomer_account_number(customerAccountNumber);
            account.setCard(card);

            return account;
        }

        public Account save(Account account) {
            return accountRepository.addAccount(account);
        }

        public Account find(String c) {
            return accountRepository.findAccount(c);
        }

        public boolean exist(String c) {
            return accountRepository.cardExist(c);
        }

        public List<Account> all() {
            return accountRepository.allAccounts();
        }

    }
  learner_created: true
- name: src/banking/helpers/CardPinGenerator.java
  visible: true
  text: |
    package banking.helpers;

    import java.util.Random;

    public class CardPinGenerator {

        private int leftLimit = 48;
        private int rightLimit = 57;
        private int targetStringLength = 4;
        private Random random = new Random(1000000);

        public String generate4Digits() {
            return random.ints(leftLimit, rightLimit + 1)
                    .limit(targetStringLength)
                    .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                    .toString();
        }
    }
  learner_created: true
- name: src/banking/business/Account.java
  visible: true
  text: |
    package banking.business;


    import java.math.BigDecimal;

    public class Account {
        //Banking Identification Number
        private final String BIN = "400000";
        private final String CHECK_DIGIT = "9";

        private String customer_account_number;
        private long balance = 0;
        private Card card;

        public Account() {
        }

        public Account(Card card) {
            this.card = card;
        }

        public Card getCard() {
            return card;
        }

        public void setCard(Card card) {
            this.card = card;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public String getBIN() {
            return BIN;
        }

        public String getCHECK_DIGIT() {
            return CHECK_DIGIT;
        }

        public String getCustomer_account_number() {
            return customer_account_number;
        }

        public void setCustomer_account_number(String customer_account_number) {
            this.customer_account_number = customer_account_number;
        }

        @Override
        public String toString() {
            return "Account{" +
                    "BIN='" + BIN + '\'' +
                    ", CHECK_DIGIT='" + CHECK_DIGIT + '\'' +
                    ", customer_account_number='" + customer_account_number + '\'' +
                    ", balance=" + balance +
                    ", card=" + card +
                    '}';
        }
    }
  learner_created: true
- name: src/banking/helpers/LuhnAlgorithmHelper.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 19 Feb 2022 13:58:48 UTC
record: 2
